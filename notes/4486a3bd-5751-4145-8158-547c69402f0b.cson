createdAt: "2018-05-13T02:05:27.020Z"
updatedAt: "2018-05-14T09:08:57.952Z"
type: "MARKDOWN_NOTE"
folder: "f45813ba065419aa5b3c"
title: "時計回りのやつ解説"
content: '''
  # 時計回りのやつ解説
  
  あの短時間じゃ意味不明だったと思うので
  
  - 最短のやつ解説
  - 汎用性高いやつ
  
  の流れで綴ります。
  
  ## 解説
  
  ```
  puts->n{(a=[*[*1..n*n].each_slice(n)]).map{|r|r.map{|i|"%3d"%((f=->m{h,*t=m;h ?h+f[t.transpose.reverse]:[]})[a].index(i)+1)}*''}}[5]
  ```
  
  これです。
  ハードコーディングだらけのやつでなくこれ。
  まあこれも桁数はハードコーディングなんですけどね。
  
  これを分解してみます。
  
  ```
  def create_array(num)
    (1..num * num).to_a
  end
  
  def create_matrix(array, num)
    array.each_slice(num).to_a
  end
  
  def correspondence_table(matrix)
    head, *tail = matrix
    head ? head + correspondence_table(tail.transpose.reverse) : []
  end
  
  def spiral(num)
    array = create_array(num)
    matrix = create_matrix(array, num)
    matrix.map do |row|
      result = row.map do |value|
        v = correspondence_table(matrix).index(value)+1
        "%3d"%v
      end
      result * ''
    end
  end
  
  puts spiral(3)
  ```
  
  だいたいこんな感じです。
  なお分かりやすくするため、ここでは3＊3のデータを出力することにします。
  まず`create_array`で1~9の配列を作成します。
  `create_matrix`でそれを3 \\* 3の二次元配列に変換します。
  
  ```
  [
    [1, 2, 3],
    [4, 5, 6],
    [7, 8, 9]
  ]
  ```
  
  2次元配列を`map`で展開。
  この時点で`[1,2,3]`といった配列が入ってきます。
  更にそれを`map`で展開。
  
  ここでようやく再帰のとこです。
  
  `correspondence_table(matrix)`
  
  ここで何をしているかというと、要は時計回りに配置されていった時、その数字は何番目に来るのかを記録した配列を生成しています。
  
  具体的な処理を見ていきましょう。
  
  まず`matrix`、つまりは1~9が順に格納された二次元配列が渡されます。
  `head, *tail = matrix`
  では、二次元配列の最初の要素を`head`、それ以外の要素は`tail`に格納しています。
  
  次がこの再帰の最後の処理で、
  `head ? head + correspondence_table(tail.transpose.reverse) : []`
  要は`head`が存在しているなら、今の`head`と`correspondence_table(tail.transpose.reverse)`の結果を結合して返す。そうでないなら空配列を返す。
  
  では肝心の`correspondence_table(tail.transpose.reverse)`の処理はどうなっているのでしょうか。
  `transpose`は行列の転置を行います。ようは二次元配列の行と列を入れ替えるわけですね。
  ```
  [
    [4, 5, 6],
    [7, 8, 9]
  ]
  ```
  が
  ```
  [
    [4, 7],
    [5, 8],
    [6, 9]
  ]
  ```
  になるイメージです。
  `reverse`は配列の要素の逆転ですので、
  ```
  [
    [6, 9],
    [5, 8],
    [4, 7]
  ]
  ```
  最終的にこうなります。
  ところでこの形、何かひらめかないでしょうか。
  最初に`head`として切り取った`[1,2,3]`があると仮定するとこうなります。
  ```
  [
    [3, 6, 9],
    [2, 5, 8],
    [1, 4, 7]
  ]
  ```
  そうです。配列を時計回りに回転させたときの構成になるのです。
  
  `tail.transpose.reverse`の正体はこれで、これを関数の引数として渡しているわけです。
  渡された配列は
  ```
  [
    [6, 9], # head
    [5, 8], # 以降tail
    [4, 7]  
  ]
  tail
  [
    [5, 8],
    [4, 7]  
  ]
  tail.transpose.reverse
  [
    [8, 7],
    [5, 4]  
  ]
  ```
  としてどんどん外周だけが`head`に格納されていきます。
  この再帰のイメージは外周を切り取っていくイメージなのです。
  ```
  head: [1, 2, 3]
  tail: [[4, 5, 6], [7, 8, 9]]
  head: [6, 9]
  tail: [[5, 8], [4, 7]]
  head: [8, 7]
  tail: [[5, 4]]
  head: [4]
  tail: [[5]]
  head: [5]
  tail: []
  head: nil
  tail: []
  ```
  
  最終的に`head`は`nil`のため、`[]`が返ってきて、`head`と結合されていきます。
  
  `[1, 2, 3, 6, 9, 8, 7, 4, 5]`
  
  さてこういった配列が返ってきます。
  最初に説明した通り、これは「その数字は何番目に来るのかを記録した配列」です。
  
  ところで、元々ここは`map`ブロックの中で、`value`という変数に値を入れられてくるのでした。
  最初は`[1, 2, 3]`の値である`1`、`2`、`3`が順番に入ります。
  先程生成した配列に、どの数字が何番目に来るのかを見てみましょう。
  
  ```
  index(1) + 1 # => 1
  index(2) + 1 # => 2
  index(3) + 1 # => 3
  ```
  この`map`ブロックが終了すると、ちょっと奇妙なRubyの仕様なのですが、`map`で生成された配列は空文字列と結合され、最終的に文字列として外側の`map`に返されます。
  ```
  [1, 2, 3] * '' == "123"
  ```
  
  次に`[4, 5, 6]`
  ```
  index(4) + 1 # => 8
  index(5) + 1 # => 9
  index(6) + 1 # => 4
  [8, 9, 4] * '' == "894"
  ```
  
  最後に`[7, 8, 9]`
  ```
  index(7) + 1 # => 7
  index(8) + 1 # => 6
  index(9) + 1 # => 5
  [7, 6, 5] * '' == "765"
  ```
  
  つまり最終的に外の`map`からは
  ```
  [
    "123",
    "894",
    "765"
  ]
  ```
  という配列が返ってきます。
  
  これで無事に結果が得られました。
  
  普通に考えたら`map`の中で配列を作るためだけに、何度も関数を呼び出しているのはとても正気とは思えませんが、なるべくコードを短くして実装するという意図のため、このあたりは致し方なしということで。
  
  ## 汎用性高いやつ
  
  一応、短くしつつ桁数合わせたり、引数を配列にしたりなんてやつもあります。
  
  ```
  puts->a{(m=[*a.each_slice(Math.sqrt((n=a.max)))]).map{|r|r.map{|i|"%#{n.to_s.size+1}d"%((f=->m{h,*t=m;h ?h+f[t.transpose.reverse]:[]})[m].index(i)+1)}*''}}[[*1..25]]
  ```
  
  常識的な範囲内なら実行できると思います。
  あまりに深すぎると多分stack level too deep辺りが出て再帰くんに怒られると思います。
  n\\*2-1回の処理が行われるはずなので、4000\\*4000とかやったら怒られるんじゃないでしょうか。
  とりあえず1000\\*1000は行けました。
  
'''
tags: [
  "ruby"
  "clockwise"
  "spiral"
]
isStarred: false
isTrashed: false
