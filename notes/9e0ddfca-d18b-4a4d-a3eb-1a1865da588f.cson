createdAt: "2018-05-24T07:11:30.327Z"
updatedAt: "2018-05-24T11:25:35.150Z"
type: "MARKDOWN_NOTE"
folder: "22029e953c66da55cc6f"
title: "型クラス"
content: '''
  # 型クラス
  
  ジェネリクスやインターフェイスなどと比べてみます。
  
  ## ジェネクリス
  
  ジェネリクスのアプローチとしては、こういうクラスやメソッドを作りたい！けど型によって別途にクラスを作ったりオーバーロードしまくるのは面倒だし、受け取る型が動的であって欲しい、というもの。
  
  ジェネリクスはクラス、メソッド、インターフェイスとあります。
  
  クラスは`List<T>`のようなもので、メソッドは`<T> dosomething(T value) {}`のようなものです。
  
  基本的には包み込むクラスとして、またメソッドでは引数や戻り値として扱うことが多いです。
  
  そうやって扱う場合は特に問題がないんですけど、どうしても`T`によって操作を変えたい！ってパターンが出てきます。
  
  クラスにしろメソッドにしろ、`T`が何者かわからないため、`T`を`new`したり、何かメソッドを実行することは通常不可能です。が、`T`が何かを継承、実装していることを明示してやればそのメソッドは呼び出せます。
  
  そういう時に役に立つのが（抽象）クラスやインターフェイス、型クラスなどです。
  
  ## インターフェイス
  
  「この操作ができる」ということを宣言するために使われます。
  「こういう機能を提供する◯◯という特徴」と考えると分かりやすいかもしれないです。
  
  Javaなんかはクラス拡張が（リフレクションを除いて）ないので、クラス宣言時しか実装はできません。
  つまり「既存の型に"ある特徴"があることを追加することはできない」ということですね。
  
  ## 型クラス
  
  型クラスは文字通り型のクラスみたいなもので、「ある型クラスのインスタンスである型は、その型クラスの特徴を持つ」といえます。
  
  よくインターフェイスと比較されたり、後付出来るインターフェイスなどと言われるので、じゃあこっちだけでよくね？と思われがちなのですが、最大の特徴はレシーバが存在するか否か、状態を持つか否かだと、（僕は）思ってます。
  
  インターフェイスはクラスに対して実装するので、自分自身というレシーバが存在します。更にはそのインスタンスが持つ状態が存在し参照できます。が、型クラスは「この型が入ってきたらこの操作実行してね」みたいに宣言するものなので、インスタンス自身は不明のためレシーバは存在しないし状態もない、ということです。
'''
tags: []
isStarred: false
isTrashed: false
